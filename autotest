#!/usr/bin/perl
use vars qw($APP $VERSION);
$APP     = 'autotest';
$VERSION = 0.022;

use strict;
use Getopt::Long;
use Linux::Inotify2;
use Pod::Usage;
use Data::Dumper;
use Term::ExtendedColor;

$Data::Dumper::Terse     = 1;
$Data::Dumper::Indent    = 1;
$Data::Dumper::Useqq     = 1;
$Data::Dumper::Deparse   = 1;
$Data::Dumper::Quotekeys = 0;
$Data::Dumper::Sortkeys  = 1;


our($opt_watch_file);
GetOptions(
  'file:s'    => \$opt_watch_file,
  'help'      => sub { print "$APP v$VERSION\n\n"; pod2usage(verbose => 1); },
);

@ARGV and $opt_watch_file = shift(@ARGV);

# FIXME
my($project_dir) = $opt_watch_file =~ m;(.+)/.+;;

if($project_dir =~ m;(.+)/lib.+;) {
  chdir($1) or print "file?\n";
}

watch($opt_watch_file);

sub watch {
  my $to_watch = shift;
  my $not = Linux::Inotify2->new;

  $not->watch($to_watch, IN_CLOSE_WRITE) or die($!);

  my $previous_passes = 0;
  my $new_passes;
  my $revision = undef;

  while(my @events = $not->read) {
    unless(@events > 0) {
      warn "Read error: $!\n";
      last;
    }

    for my $event(@events) {

      open(OLD_STDOUT, '>&', *STDOUT) or die($!);
      close(STDOUT);

      if(system('make') == 0) {

        open(my $test, '-|', 'make test') or die($!);
        my $test_output = join('', <$test>);

        open(STDOUT, '>&', *OLD_STDOUT) or die($!);

        if(test_pass($test_output)) {

          $new_passes = no_passes($test_output);
          my $cmp = compare_passes($previous_passes, $new_passes);

          format_output($cmp, $revision);
          not defined $revision and $revision = 0;
          $revision++;

        }
        else {
          my $new_fails = no_fails($test_output);
          format_output($new_fails, $revision);

          not defined $revision and $revision = 0;
          $revision++;
        }

        $previous_passes = $new_passes;
      }
    }
  }
}

sub compare_passes {
  my($old, $new) = @_;

  if($new > $old) {
    return ( $new - $old );
  }
  elsif($new == $old) {
    return 0;
  }
  else {
    return -1;
  }
}

sub no_passes {
  my $test = shift;

  my($passes) = $test =~ /Files=(?:\d+), Tests=(\d+),/;

  return $passes;
}

sub no_fails {
  my $test = shift;

  my($fails) = $test =~ m;Failed ([\d/]+);;

  return $fails;
}

sub test_pass {
  my $test = shift;

  my($status) = $test =~ m/Result: (.+)/;

  return ($status eq 'PASS') ? 1 : 0;
}

sub format_output {
  my($n, $first_run) = @_;


  print '-' x 3, "\n";

  if($n =~ m;\d+/\d+;) {
    # failed
    printf("%s %s tests failed\n",
      fg('bold', fg('red4', '>> ')),
      fg('bold', fg('red3', $n)),
    );
  }
  elsif($n > 0 ) {
    printf("%s %s%stests passed\n",
      fg('bold', fg('green10', '>> ')),
      fg('bold', fg('green17', $n)),
      (defined($first_run)) ? ' additional ' : ' ',
    );
  }
  elsif($n == 0) {
    printf("%s No change\n",
      fg('bold', fg('orange1', '>> ')),
    );
  }
  else {
    printf("%s %s %s\n", 
      fg('bold', fg('red1', '>> ')),
      fg('bold', fg('red3', $n)),
      'Regression',
    );
  }
}

=pod

=head1 NAME

autotest - test more

=head1 USAGE

autotest [-f ] [FILE...]

=head1 OPTIONS

  -f,   --file  file/dir to watch

=head1 EVENTS

  '1'          => 'IN_ACCESS',       # file was accessed
  '2'          => 'IN_MODIFY',       # file was modified
  '4'          => 'IN_ATTRIB',       # metadata has changed
  '8'          => 'IN_CLOSE_WRITE',  # writeable file was closed
  '16'         => 'IN_CLOSE_NOWRITE',# unwriteable file was closed
  '32'         => 'IN_OPEN',         # file was opened
  '64'         => 'IN_MOVED_FROM',   # file was moved from X
  '128'        => 'IN_MOVED_TO',     # file was moved to Y
  '256'        => 'IN_CREATE',       # subfile was created
  '512'        => 'IN_DELETE',       # subfile was deleted
  '1024'       => 'IN_DELETE_SELF',  # self/dir was deleted
  '2048'       => 'IN_MOVE_SELF',    # self was moved
  '8192'       => 'IN_UNMOUNT',      # fs was unmounted
  '16384'      => 'IN_O_OVERFLOW',   # Even queued overflowed
  '32768'      => 'IN_IGNORED',      # file was ignored
  '1073741824' => 'IN_ISDIR',        # event occurred against dir

=head1 OPTIONS

=head1 AUTHOR

Written by Magnus Woldrich

=head1 REPORTING BUGS

Report bugs to trapd00r@trapd00r.se

=head1 COPYRIGHT


